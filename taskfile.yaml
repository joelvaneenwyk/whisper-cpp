# https://taskfile.dev
# yaml-language-server: $schema=https://taskfile.dev/schema.json
# https://taskfile.dev

version: "3"

vars:
  VCPKG_BOOTSTRAP_BAT: "{{.TASKFILE_DIR}}/external/vcpkg/bootstrap-vcpkg.bat"
  VCPKG_BOOTSTRAP_SH: "{{.TASKFILE_DIR}}/external/vcpkg/bootstrap-vcpkg.sh"
  VCPKG_EXE: "{{.TASKFILE_DIR}}/external/vcpkg/vcpkg.exe"

  RUN_WINDOWS: 'cmd /d /c'
  RUN_UNIX: 'sh -c'
  RUN: '{{if eq OS "windows"}}{{.RUN_WINDOWS}}{{ else }}{{.RUN_UNIX}}{{ end }}'

  MSBUILD_EXE_RAW:
    sh: |
      strings=("Preview" "Enterprise" "Professional" "Community")
      for str in "${strings[@]}"
      do
        result="C:/Program Files/Microsoft Visual Studio/2022/${str}/MSBuild/Current/Bin/amd64/MSBuild.exe"
        if [ -e "$result" ]; then
          echo "$result"
          break
        fi
      done
  MSBUILD_EXE: '{{fromSlash .MSBUILD_EXE_RAW}}'

  BUILD_INT_DIR: "{{.TASKFILE_DIR}}/.build"
  BUILD_DIR: "{{fromSlash .BUILD_INT_DIR}}"

env:
  VCPKG_DISABLE_METRICS: 1

tasks:
  default:
    cmds:
      - task: build

  build:
    deps: [vcpkg-install]
    vars:
      CONFIG: Release
      ARCHITECTURE: x64
      USE_SDL2: ON
      GENERATOR: "Visual Studio 17 2022"
      TOOLCHAIN: '{{.TASKFILE_DIR}}/external/vcpkg/scripts/buildsystems/vcpkg.cmake'

    preconditions:
      - '"{{.MSBUILD_EXE}}" --version'
      - 'cmake --version'
    cmds:
      - cmd: >
          cmake
          -S "{{ .TASKFILE_DIR }}"
          -B "{{ .BUILD_DIR }}"
          -G "{{ .GENERATOR }}" -A "{{ .ARCHITECTURE }}"
          -DCMAKE_BUILD_TYPE="{{ .CONFIG }}"
          -DWHISPER_SDL2={{ .USE_SDL2 }}
          -DCMAKE_TOOLCHAIN_FILE="{{fromSlash .TOOLCHAIN}}"

      - cmd: |
          "{{.MSBUILD_EXE}}" "{{ .BUILD_DIR }}/ALL_BUILD.vcxproj" -t:Build -p:Configuration="{{ .CONFIG }}"

      - task: msbuild
        vars: { CONFIG: Debug, PLATFORM: '{{ .ARCHITECTURE }}' }
      - task: msbuild
        vars: { CONFIG: Release, PLATFORM: '{{ .ARCHITECTURE }}' }

      #  with:
      #    name: "{{ .jnaPath }}_whisper.dll"
      #    path: "{{ .BUILD_DIR }}/bin/{{ .CONFIG }}/whisper.dll"

      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: "whisper-bin-{{ .ARCHITECTURE }}"
      #    path: "{{ .BUILD_DIR }}/bin/{{ .CONFIG }}"

  msbuild:
    internal: true
    deps: [install-dependencies]
    vars:
      CONFIG: '{{.CONFIG | default "Debug"}}'
      PLATFORM: '{{.PLATFORM | default "x64"}}'
    cmds:
      - cmd: >
          "{{ .MSBUILD_EXE }}"
          /t:Build /p:Configuration="{{.CONFIG}}" /p:Platform="{{.PLATFORM}}"
          "{{ .BUILD_DIR }}/whisper.cpp.sln"

  install-dependencies:
    deps: [install-packages-scoop-pkg-config]
    cmds:
      - task: install-packages
      - task: vcpkg-install

  scoop-install:
    desc: Install libraries with scoop
    status:
      - 'scoop --version'
    cmds:
      - cmd: pwsh -NoProfile -Command 'iex "& {$(irm get.scoop.sh)} -RunAsAdmin"'
        platforms: [windows]
        ignore_error: true
      - cmd: pwsh -NoProfile -Command 'Join-Path (Resolve-Path ~).Path "scoop/shims" >> $Env:GITHUB_PATH'
        platforms: [windows]
        ignore_error: true

  git-submodule-init:
    status:
      - 'test -f "{{.VCPKG_BOOTSTRAP_BAT}}"'
    cmds:
      - cmd: 'git -C "{{.TASKFILE_DIR}}" submodule update --init --recursive'

  vcpkg-install:
    deps: [vcpkg-integrate]
    status:
      - 'test -f "./vcpkg_installed/x64-windows/bin/iir.dll"'
    cmds:
      - cmd: '{{.RUN}} "{{ fromSlash .VCPKG_EXE }}" install'

  vcpkg-integrate:
    deps: [vcpkg-download]
    cmds:
      - cmd: '{{.RUN}} "{{ fromSlash .VCPKG_EXE }}" integrate install'

  vcpkg-download:
    deps: [git-submodule-init]
    status:
      - 'test -f "{{.VCPKG_EXE}}"'
    cmds:
      - cmd: '{{.RUN}} "{{ fromSlash .VCPKG_BOOTSTRAP_BAT }}" -disableMetrics'

  install-packages:
    cmds:
      - task: install-packages-scoop-pkg-config

  install-packages-scoop-pkg-config:
    deps: [scoop-install]
    platforms: [windows]
    status:
      - pkg-config --version
    cmds:
      - cmd: scoop install extras/pkg-config-lite

  delete:
    internal: true
    requires: { vars: [TARGET_DIR] }
    status:
      - 'test -d "{{.TARGET_DIR}}"'
    cmds:
      - cmd: '{{.RUN}} if exist "{{.TARGET_DIR}}" rmdir /s /q "{{.TARGET_DIR}}"'
        platforms: [windows]
      - cmd: '{{.RUN}} rm -rf "{{.TARGET_DIR}}"'
        platforms: [linux, darwin]
